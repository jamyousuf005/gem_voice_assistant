  import 'package:fitnessappflutter/pallete.dart';
  import 'package:flutter/material.dart';
  import 'package:speech_to_text/speech_recognition_result.dart';
  import 'package:speech_to_text/speech_to_text.dart';
  import 'package:flutter_tts/flutter_tts.dart';
  import 'package:google_generative_ai/google_generative_ai.dart';
  import 'package:shared_preferences/shared_preferences.dart';
  import 'secrets.dart';

  class HomePage extends StatefulWidget {
    const HomePage({super.key});

    @override
    State<HomePage> createState() => _HomePageState();
  }

  class _HomePageState extends State<HomePage> {
    final speechToText = SpeechToText();
    final flutterTts = FlutterTts();
    late GenerativeModel model;

    String lastWords = '';
    String aiResponse = '';
    bool isLoading = false;
    bool voiceOutputEnabled = true; // voice of the bot coveRS both enabling and disabling the voice
    bool showHistory = false; // using Toggle to enable older responseS generated by GeminAi

    List<String> responseHistory = []; //this list is for saving the responses, latest at the top

    @override
    void initState() {
      super.initState();
      initSpeechToText();
      initTts();
      initGemini();
      loadResponseHistory();
    }

  void initGemini() {
    model = GenerativeModel(model: 'gemini-2.5-flash', apiKey: geminAiApiKey);
  }

  Future<void> initSpeechToText() async {
    await speechToText.initialize();
    setState(() {});
  }

  Future<void> initTts() async {
    await flutterTts.setLanguage("en-US");
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
  }

  Future<void> startListening() async {
    await speechToText.listen(onResult: onSpeechResult);
    setState(() {});
  }

  Future<void> stopListening() async {
    await speechToText.stop();
    await sendToGemini();
    setState(() {});
  }

  String cleanGeminiResponse(String text) {
    return text
        .replaceAll(RegExp(r'\*+'), '') 
        .replaceAll(RegExp(r'#+'), '') 
        .replaceAll(RegExp(r'_+'), '') 
        .replaceAll(RegExp(r'`+'), '')
        .replaceAll(RegExp(r'\n\s*\n'), '\n') 
        .trim();
  }

  void onSpeechResult(SpeechRecognitionResult result) {
    setState(() {
      lastWords = result.recognizedWords;
    });
  }

  
  Future<void> saveResponseHistory() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setStringList('geminiAllResponses', responseHistory);
  }

  Future<void> loadResponseHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final savedList = prefs.getStringList('geminiAllResponses') ?? [];
    setState(() {
      responseHistory = savedList;
    });
  }

  Future<void> sendToGemini() async {
    if (lastWords.isEmpty) return;

    setState(() {
      isLoading = true;
      aiResponse = '';
    });

    try {
      final content = [Content.text(lastWords)];
      final response = await model.generateContent(content);
      final text = cleanGeminiResponse(
        response.text ?? "No response from Gemini.",
      );

      setState(() {
        aiResponse = text;
        isLoading = false;

        //Add late=st responeses at the top
        responseHistory.insert(0, text);
      });

      await saveResponseHistory();

      if (voiceOutputEnabled) {
        await speak(aiResponse);
      }
    } catch (e) {
      setState(() {
        aiResponse = "Error: $e";
        isLoading = false;
      });
    }
  }

  Future<void> speak(String text) async {
    await flutterTts.stop();            //will cut off previosu speech
                                        // and continue from the new one
    await flutterTts.speak(text);    
  }

  Future<void> stopSpeaking() async {
    await flutterTts.stop();
  }

  @override
  void dispose() {
    speechToText.stop();
    flutterTts.stop();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white70,
      appBar: AppBar(
        title: const Text(
          "ChatUp Voice Assistant",
          style: TextStyle(fontWeight: FontWeight.w600, letterSpacing: 0.5),
        ),
        centerTitle: true,
        elevation: 2,
        backgroundColor: Colors.deepPurple.shade400,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(
              maxWidth: 600, 
            ),
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const SizedBox(height: 20),

                  //   Avatar pic
                  Stack(
                    alignment: Alignment.center,
                    children: [
                      Container(
                        height: 130,
                        width: 130,
                        decoration: const BoxDecoration(
                          color: Pallete.assistantCircleColor,
                          shape: BoxShape.circle,
                        ),
                      ),
                      Container(
                        height: 133,
                        width: 133,
                        decoration: const BoxDecoration(
                          shape: BoxShape.circle,
                          image: DecorationImage(
                            image: AssetImage(
                              'assets/images/virtualAssistant.png',
                            ),
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                    ],
                  ),

                  const SizedBox(height: 30),

                  // You said
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      "You said",
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.w600,
                        color: Colors.grey.shade800,
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.deepPurple.shade100,
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Text(
                      lastWords.isEmpty ? "Say something..." : lastWords,
                      style: const TextStyle(fontSize: 18, height: 1.4),
                    ),
                  ),

                  const SizedBox(height: 30),

                  //  Gemini says with volume button
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        "Gemini says",
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.w600,
                          color: Colors.grey.shade800,
                        ),
                      ),
                      IconButton(
                        icon: Icon(
                          voiceOutputEnabled
                              ? Icons.volume_up
                              : Icons.volume_off,
                          color: Colors.deepPurple,
                          size: 28,
                        ),
                        onPressed: () async {
                          setState(() {
                            voiceOutputEnabled = !voiceOutputEnabled;
                          });

                          if (voiceOutputEnabled) {
                            if (aiResponse.isNotEmpty && !isLoading) {
                              await speak(aiResponse);
                            }
                          } else {
                            await stopSpeaking();
                          }
                        },
                      ),
                    ],
                  ),

                  const SizedBox(height: 8),

                  AnimatedContainer(
                    duration: const Duration(milliseconds: 300),
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.deepPurple.shade100,
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: isLoading
                        ? const Center(
                            child: CircularProgressIndicator(
                              color: Colors.deepPurple,
                              strokeWidth: 3,
                            ),
                          )
                        : Text(
                            aiResponse.isEmpty
                                ? "Awaiting your voice input..."
                                : aiResponse,
                            style: const TextStyle(fontSize: 18, height: 1.4),
                          ),
                  ),

                  const SizedBox(height: 20),

                  //  History Section
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        "Previous Responses",
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.grey.shade700,
                        ),
                      ),
                      Row(
                        children: [
                          IconButton(
                            icon: const Icon(
                              Icons.delete_forever,
                              color: Colors.redAccent,
                            ),
                            tooltip: "Clear All",
                            onPressed: () async {
                              final preferences =
                                  await SharedPreferences.getInstance();
                              await preferences.remove('geminiResponses');
                              setState(() => responseHistory.clear());
                            },
                          ),
                          IconButton(
                            icon: Icon(
                              showHistory
                                  ? Icons.expand_less
                                  : Icons.expand_more,
                              color: Colors.deepPurple,
                            ),
                            tooltip: showHistory
                                ? "Hide History"
                                : "Show History",
                            onPressed: () {
                              setState(() => showHistory = !showHistory);
                            },
                          ),
                        ],
                      ),
                    ],
                  ),

                  if (showHistory) ...[
                    const SizedBox(height: 10),
                    if (responseHistory.isEmpty)
                      const Text(
                        "No previous responses yet.",
                        style: TextStyle(color: Colors.grey, fontSize: 16),
                      )
                    else
                      ListView.builder(
                        shrinkWrap: true,
                        physics: const NeverScrollableScrollPhysics(),
                        itemCount: responseHistory.length,
                        itemBuilder: (context, index) {
                          return Container(
                            margin: const EdgeInsets.symmetric(vertical: 6),
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.grey.shade300,
                                  blurRadius: 6,
                                  offset: const Offset(0, 3),
                                ),
                              ],
                            ),
                            child: Text(
                              responseHistory[index],
                              style: const TextStyle(fontSize: 16, height: 1.4),
                            ),
                          );
                        },
                      ),
                  ],

                  const SizedBox(height: 60),
                ],
              ),
            ),
          ),
        ),
      ),

      //  Mic Button
      floatingActionButton: Container(
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          boxShadow: [
            BoxShadow(
              color: Colors.deepPurple,
              blurRadius: 20,
              spreadRadius: 5,
            ),
          ],
        ),
        child: FloatingActionButton(
          backgroundColor: Colors.deepPurple,
          onPressed: () async {
            if (await speechToText.hasPermission && !speechToText.isListening) {
              await startListening();
            } else if (speechToText.isListening) {
              await stopListening();
            } else {
              await initSpeechToText();
            }
          },
          child: Icon(
            speechToText.isListening ? Icons.stop : Icons.mic,
            color: Colors.white,
            size: 30,
          ),
        ),
      ),
    );
  }
}
